'''
Задача 22:
Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
Пользователь вводит 2 числа.
n - кол-во элементов первого набора.
m - кол-во элементов второго набора.
Значения генерируются случайным образом.

Input: 11 6
(значения сгенерированы случайным образом
2 4 6 8 10 12 10 8 6 4 2
3 6 9 12 15 18)

Output: 11 6
6 12
'''


print('Решение задания №22: ')
print('-' * 25)

def gen_array(x):

    import random

    while True:
        try:
            n = int(input(f'Ввод: '))
            if n < 0:
                print(f'Вы ввели число: {n}, которое меньше 0. Количество элементов должно быть положительным числом.')
                continue
            if n == 0:
                print(f'Вы ввели число {n}. В массиве должно быть положительное количество элементов.')
            else:
                set_1 = set()

                for item in range(0, n):
                    set_1.add(round(random.randint(0, 1000)))
                break
        except:
            print(f'Вы ввели не число. ')
    print(f'Вывод неупорядоченного набора №{x}:', set_1)
    return set_1


def print_arr(arr):
    print(arr)


def new_arr(arr1, arr2):

    f = list(set(arr1) - (set(arr1) - set(arr2)))
    print('Для проверки, отсортированный первый набор чисел:')
    sort_arr(arr1)
    print('Для проверки, отсортированный второй набор чисел:')
    sort_arr(arr2)
    return f


def sort_arr(arr):

    new_arr = []
    if len(arr) == 0:
        print('В наборах нет одинаковых чисел.')
    else:
        while arr:
            item_min = arr[0]
            for item in arr:
                if item < item_min:
                    item_min = item
            new_arr.append(item_min)
            arr.remove(item_min)

        print(new_arr)


print('Введите количестов элементов первого набора.' )
n = list(gen_array(1))
print()
print('Введите количестов элементов второго набора: ')
m = list(gen_array(2))
print()
a = new_arr(n,m)
print()
print('Ответ на задание: ')
sort_arr(a)
print()
print('*' * 100)


'''
Задача 24:
В фермерском хозяйстве в Карелии выращивают чернику. 
Она растет на круглой грядке, причем кусты высажены только по окружности. 
Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растет N кустов. 
Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них 
выросло различное число ягод – на i-ом кусте выросло ai ягод.
В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
собирает ягоды с этого куста и с двух соседних с ним.

Напишите программу для нахождения максимального числа ягод, 
которое может собрать за один заход собирающий модуль, 
находясь перед некоторым кустом заданной во входном файле грядки.

Input: 4
(значения сгенерированы случайным образом
4 2 3 1 )

Output: 9

'''
print('Решение задания №24: ')
print('-' * 25)


def gen_bush(): #генерация кустов черники

    import random
    n = round(random.randint(3, 50))
    print(f'Случайным образом сгенерировано {n} кустов черники.')
    return n


def gen_berry(quantity): #генерация количества ягод на кустах черники

    import random
    arr = []
    for i in range(quantity):
        arr.append(round(random.randint(0, 20)))
    print(f'Случайным образом сгенерировано количество ягод на каждом кусте: {arr}')
    return arr


def bush_aim(arr): #генерация номера куста напротив которого находится собирающий модуль

    import random
    n = round(random.randint(1, len(arr)))
    print(f'Случайным образом сгенерирован номер куста напротив которого находится собирающий модуль: {n}')
    return n


def harvest(arr, amount): #Вычисление урожацности трех кустов

    new_list = arr.copy()
    new_list.append(new_list[0])
    new_list.insert(0, new_list[- 2])
    sum_berry = new_list[amount - 1] + new_list[amount] + new_list[amount + 1]
    print(f'Всего ягод собрано с трех кустов: {sum_berry}')


x = gen_berry(gen_bush())
y = bush_aim(x)
harvest(x, y)
